<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Load options</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Load options</group-name>
 <menu-path>skymenu&gt;end("sky130 PDK").end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># Copyright 2022 SkyWater PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

 module MyMacro
 
  include RBA


  #####################################################################################
  # Loading options
  #####################################################################################
  mw = RBA::MainWindow::instance

  # create a toolbar skymenu
  mw.menu.insert_menu("skymenu.end", "lvs_menu", "Klayout LVS Options")
  mw.menu.insert_menu("skymenu.end", "lvs_magic_menu", "Magic LVS Options")
  mw.menu.insert_menu("skymenu.end", "pex_magic_menu", "Magic PEX Options")
  mw.menu.insert_separator("skymenu.pex_magic_menu+", "name2")

  #####################################################################################
  # Adding Klayout LVS options
  #####################################################################################
  
  #1 Adding substrate name
  run_action = RBA::Action::new
  run_action.title = "Substrate name"
  run_action.on_triggered do
    sub_name = RBA::InputDialog::ask_string("Substrate name", "Please enter substrate name", "GND")
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if sub_name 
        if text.include?("$lvs_sub")
          new_contents = text.gsub(/lvs_sub = \".*\"/, '$lvs_sub = "'+ sub_name + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, 'lvs_sub = "'+ sub_name +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
    #system( "klayout -r #{File.expand_path File.dirname(__FILE__)}/sky130.lvs -rd input=#{RBA::CellView::active.filename}" )
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "SUB_name", run_action)
  
  #2 Setting run mode
  run_mode_action = RBA::Action::new
  run_mode_action.title = "Run mode"
  run_mode_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select run mode:", [ "tiling", "deep", "flat" ], 1)
      if run_mode_select 
        if text.include?("$run_mode")
          new_contents = text.gsub(/\$run_mode = \".*\"/, '$run_mode = "'+ run_mode_select + '"')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/(\# \%.*lvs)/m, '$run_mode = "'+ run_mode_select +'"' +"\n"+'\1')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "run_mode", run_mode_action)
  
  #3 Setting spice net names
  spice_net_action = RBA::Action::new
  spice_net_action.title = "SPICE net name"
  spice_net_action.checkable=(true)
  spice_net_action.checked=(true)
  spice_net_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if spice_net_action.is_checked?
        spice_net_bool = "true"
      else
        spice_net_bool = "false"
      end
      if text.include?("$spice_net_names")
        new_contents = text.gsub(/\$spice_net_names = \".*\"/, '$spice_net_names = "'+ spice_net_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$spice_net_names = "'+ spice_net_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "SPICE_net_name", spice_net_action)
  
  #4 Setting spice comments
  spice_comment_action = RBA::Action::new
  spice_comment_action.title = "SPICE comments"
  spice_comment_action.checkable=(true)
  spice_comment_action.checked=(false)
  spice_comment_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if spice_comment_action.is_checked?
        spice_comment_bool = "true"
      else
        spice_comment_bool = "false"
      end
      if text.include?("$spice_with_comments")
        new_contents = text.gsub(/\$spice_with_comments = \".*\"/, '$spice_with_comments = "'+ spice_comment_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$spice_with_comments = "'+ spice_comment_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "SPICE_comments", spice_comment_action)
  
  #5 Setting scaling
  scale_action = RBA::Action::new
  scale_action.title = "Scaling x10^6"
  scale_action.checkable=(true)
  scale_action.checked=(false)
  scale_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if scale_action.is_checked?
        scale_bool = "true"
      else
        scale_bool = "false"
      end
      if text.include?("$scale")
        new_contents = text.gsub(/\$scale = \".*\"/, '$scale = "'+ scale_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$scale = "'+ scale_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "scale", scale_action)
  
  #6 Setting verbose mode
  verbose_action = RBA::Action::new
  verbose_action.title = "Verbose mode"
  verbose_action.checkable=(true)
  verbose_action.checked=(false)
  verbose_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if verbose_action.is_checked?
        verbose_bool = "true"
      else
        verbose_bool = "false"
      end
      if text.include?("$verbose")
        new_contents = text.gsub(/\$verbose = \".*\"/, '$verbose = "'+ verbose_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$verbose = "'+ verbose_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "verbose", verbose_action)
  
  #7 Setting schematic simplification
  schematic_simple_action = RBA::Action::new
  schematic_simple_action.title = "Schematic simplify"
  schematic_simple_action.checkable=(true)
  schematic_simple_action.checked=(false)
  schematic_simple_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if schematic_simple_action.is_checked?
        schematic_simple_bool = "true"
      else
        schematic_simple_bool = "false"
      end
      if text.include?("$schematic_simplify")
        new_contents = text.gsub(/\$schematic_simplify = \".*\"/, '$schematic_simplify = "'+ schematic_simple_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$schematic_simplify = "'+ schematic_simple_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "schematic_simple", schematic_simple_action)
  
  #8 Setting netlist only
  net_only_action = RBA::Action::new
  net_only_action.title = "Netlist only"
  net_only_action.checkable=(true)
  net_only_action.checked=(false)
  net_only_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if net_only_action.is_checked?
        net_only_bool = "true"
      else
        net_only_bool = "false"
      end
      if text.include?("$net_only")
        new_contents = text.gsub(/\$net_only = \".*\"/, '$net_only = "'+ net_only_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$net_only = "'+ net_only_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "net_only", net_only_action)
  
  #9 Setting top level pins
  top_lvl_pins_action = RBA::Action::new
  top_lvl_pins_action.title = "Top level pins"
  top_lvl_pins_action.checkable=(true)
  top_lvl_pins_action.checked=(false)
  top_lvl_pins_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if top_lvl_pins_action.is_checked?
        top_lvl_pins_bool = "true"
      else
        top_lvl_pins_bool = "false"
      end
      if text.include?("$top_lvl_pins")
        new_contents = text.gsub(/\$top_lvl_pins = \".*\"/, '$top_lvl_pins = "'+ top_lvl_pins_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$top_lvl_pins = "'+ top_lvl_pins_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "top_lvl_pins", top_lvl_pins_action)
  
  #10 Setting device combine
  combine_action = RBA::Action::new
  combine_action.title = "Devices combine"
  combine_action.checkable=(true)
  combine_action.checked=(false)
  combine_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if combine_action.is_checked?
        combine_bool = "true"
      else
        combine_bool = "false"
      end
      if text.include?("$combine")
        new_contents = text.gsub(/\$combine = \".*\"/, '$combine = "'+ combine_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$combine = "'+ combine_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "combine", combine_action)
  
  #11 Setting purge
  purge_action = RBA::Action::new
  purge_action.title = "Purge"
  purge_action.checkable=(true)
  purge_action.checked=(false)
  purge_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if purge_action.is_checked?
        purge_bool = "true"
      else
        purge_bool = "false"
      end
      if text.include?("$verbose")
        new_contents = text.gsub(/\$purge = \".*\"/, '$purge = "'+ purge_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$purge = "'+ purge_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "purge", purge_action)
  
  #12 Setting purge nets
  purge_nets_action = RBA::Action::new
  purge_nets_action.title = "Purge nets"
  purge_nets_action.checkable=(true)
  purge_nets_action.checked=(false)
  purge_nets_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if purge_nets_action.is_checked?
        purge_nets_bool = "true"
      else
        purge_nets_bool = "false"
      end
      if text.include?("$purge_nets")
        new_contents = text.gsub(/\$purge_nets = \".*\"/, '$purge_nets = "'+ purge_nets_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$purge_nets = "'+ purge_nets_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "purge_nets", purge_nets_action)
  
  #13 Setting connect_implicit
  connect_implicit_action = RBA::Action::new
  connect_implicit_action.title = "Implicit connectivity"
  connect_implicit_action.checkable=(true)
  connect_implicit_action.checked=(false)
  connect_implicit_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_lvs.lylvs", 'w') { |f| 
      text = File.read(f)
      if connect_implicit_action.is_checked?
        connect_implicit_bool = "true"
      else
        connect_implicit_bool = "false"
      end
      if text.include?("$connect_implicit")
        new_contents = text.gsub(/\$connect_implicit = \".*\"/, '$connect_implicit = "'+ connect_implicit_bool + '"')
        File.open(f, "w") {|file| file.puts new_contents }
      else
        new_contents = text.gsub(/(\# \%.*lvs)/m, '$connect_implicit = "'+ connect_implicit_bool +'"' +"\n"+'\1')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_menu.end", "connect_implicit", connect_implicit_action)
  

    #####################################################################################
  # Adding Magic LVS options
  #####################################################################################
  
  #1 Setting Combine devices
  combine_action = RBA::Action::new
  combine_action.title = "Combine devices"
  combine_action.checkable=(true)
  combine_action.checked=(false)
  combine_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if combine_action.is_checked?
        combine_bool = "-M "
      else
        combine_bool = ""
      end
      new_contents = text.gsub(/combine = \".*\"/, 'combine = "'+ combine_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "combine", combine_action)
  
  #2 Setting Distribute area and perimeter
  distrib_action = RBA::Action::new
  distrib_action.title = "Distribute area and perimeter"
  distrib_action.checkable=(true)
  distrib_action.checked=(false)
  distrib_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if distrib_action.is_checked?
        distrib_bool = "-d "
      else
        distrib_bool = ""
      end
      new_contents = text.gsub(/distrib = \".*\"/, 'distrib = "'+ distrib_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "distrib", distrib_action)
  
  #3 Setting Less attributes
  no_attr_action = RBA::Action::new
  no_attr_action.title = "Less attributes"
  no_attr_action.checkable=(true)
  no_attr_action.checked=(false)
  no_attr_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if no_attr_action.is_checked?
        no_attr_bool = "-B "
      else
        no_attr_bool = ""
      end
      new_contents = text.gsub(/no_attr = \".*\"/, 'no_attr = "'+ no_attr_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "no_attr", no_attr_action)
  
  #4 Setting Purge nets
  purge_action = RBA::Action::new
  purge_action.title = "Purge nets"
  purge_action.checkable=(true)
  purge_action.checked=(false)
  purge_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      if purge_action.is_checked?
        purge_bool = "-F "
      else
        purge_bool = ""
      end
      new_contents = text.gsub(/purge = \".*\"/, 'purge = "'+ purge_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "purge", purge_action)
  
  #5 Setting Trimmed characters
  trim_action = RBA::Action::new
  trim_action.title = "Trimmed characters"
  trim_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      trim_select = RBA::InputDialog::ask_item("Trimmed characters", "Select characters to trim from nodes:", [ "#", "!", "both" ], 2)
      if trim_select
        if trim_select == "#"
          new_contents = text.gsub(/trim_hash = \".*\"/, 'trim_hash = "-t '+ trim_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        elsif trim_select == "!"
          new_contents = text.gsub(/trim_exclam = \".*\"/, 'trim_exclam = "-t '+ trim_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/trim_hash = \".*\"/, 'trim_hash = "-t '+ trim_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
          new_contents = text.gsub(/trim_exclam = \".*\"/, 'trim_exclam = "-t '+ trim_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "trim", trim_action)

  #6 Setting Run mode
  run_mode_action = RBA::Action::new
  run_mode_action.title = "Run mode"
  run_mode_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select running mode:", [ "hier", "flat"], 1)
      if run_mode_select
        if run_mode_select == "hier"
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ run_mode_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ run_mode_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "run_mode", run_mode_action)

  #7 Adding Xschem netlist path
  xschem_action = RBA::Action::new
  xschem_action.title = "Xschem netlist path"
  xschem_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      xschem = RBA::InputDialog::ask_string("Xschem netlist path", "Please enter xschem netlist path", "~/.xschem/simulations")
      if xschem
        new_contents = text.gsub(/simpath = \".*\"/, 'simpath = "'+ xschem +'"')
        File.open(f, "w") {|file| file.puts new_contents }
      end
    }
  end
  mw.menu.insert_item("skymenu.lvs_magic_menu.end", "xschem", xschem_action)
  

  #####################################################################################
  # Adding Magic PEX options
  #####################################################################################
  
  #1 Setting Combine devices
  combine_pex_action = RBA::Action::new
  combine_pex_action.title = "Combine devices"
  combine_pex_action.checkable=(true)
  combine_pex_action.checked=(false)
  combine_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      if combine_pex_action.is_checked?
        combine_pex_bool = "-M "
      else
        combine_pex_bool = ""
      end
      new_contents = text.gsub(/combine = \".*\"/, 'combine = "'+ combine_pex_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "combine", combine_pex_action)
  
  #2 Setting Distribute area and perimeter
  distrib_pex_action = RBA::Action::new
  distrib_pex_action.title = "Distribute area and perimeter"
  distrib_pex_action.checkable=(true)
  distrib_pex_action.checked=(false)
  distrib_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      if distrib_pex_action.is_checked?
        distrib_pex_bool = "-d "
      else
        distrib_pex_bool = ""
      end
      new_contents = text.gsub(/distrib = \".*\"/, 'distrib = "'+ distrib_pex_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "distrib", distrib_pex_action)
  
  #3 Setting Less attributes
  no_attr_pex_action = RBA::Action::new
  no_attr_pex_action.title = "Less attributes"
  no_attr_pex_action.checkable=(true)
  no_attr_pex_action.checked=(false)
  no_attr_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      if no_attr_pex_action.is_checked?
        no_attr_pex_bool = "-B "
      else
        no_attr_pex_bool = ""
      end
      new_contents = text.gsub(/no_attr = \".*\"/, 'no_attr = "'+ no_attr_pex_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "no_attr", no_attr_pex_action)
  
  #4 Setting Purge nets
  purge_pex_action = RBA::Action::new
  purge_pex_action.title = "Purge nets"
  purge_pex_action.checkable=(true)
  purge_pex_action.checked=(false)
  purge_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      if purge_pex_action.is_checked?
        purge_pex_bool = "-F "
      else
        purge_pex_bool = ""
      end
      new_contents = text.gsub(/purge = \".*\"/, 'purge = "'+ purge_pex_bool + '"')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "purge", purge_pex_action)
  
  #5 Setting Trimmed characters
  trim_pex_action = RBA::Action::new
  trim_pex_action.title = "Trimmed characters"
  trim_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      trim_pex_select = RBA::InputDialog::ask_item("Trimmed characters", "Select characters to trim from nodes:", [ "#", "!", "both" ], 2)
      if trim_pex_select
        if trim_pex_select == "#"
          new_contents = text.gsub(/trim_hash = \".*\"/, 'trim_hash = "-t '+ trim_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        elsif trim_pex_select == "!"
          new_contents = text.gsub(/trim_exclam = \".*\"/, 'trim_exclam = "-t '+ trim_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/trim_hash = \".*\"/, 'trim_hash = "-t '+ trim_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
          new_contents = text.gsub(/trim_exclam = \".*\"/, 'trim_exclam = "-t '+ trim_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "trim", trim_pex_action)

  #6 Setting Run mode
  run_mode_pex_action = RBA::Action::new
  run_mode_pex_action.title = "Run mode"
  run_mode_pex_action.on_triggered do
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      run_mode_pex_select = RBA::InputDialog::ask_item("Run mode", "Select running mode:", [ "hier", "flat"], 1)
      if run_mode_pex_select
        if run_mode_pex_select == "hier"
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ run_mode_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        else
          new_contents = text.gsub(/mode = \".*\"/, 'mode = "-J '+ run_mode_pex_select + ' "')
          File.open(f, "w") {|file| file.puts new_contents }
        end
      end
    }
  end
  mw.menu.insert_item("skymenu.pex_magic_menu.end", "run_mode", run_mode_pex_action)


  #####################################################################################
  # Return to defaults on closing
  #####################################################################################
  
  mw.on_view_closed do
    
    str = '&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;klayout-macro&gt;
 &lt;description&gt;Run Klayout LVS&lt;/description&gt;
 &lt;version&gt;0.1&lt;/version&gt;
 &lt;category&gt;lvs&lt;/category&gt;
 &lt;prolog/&gt;
 &lt;epilog/&gt;
 &lt;doc/&gt;
 &lt;autorun&gt;false&lt;/autorun&gt;
 &lt;autorun-early&gt;false&lt;/autorun-early&gt;
 &lt;shortcut/&gt;
 &lt;show-in-menu&gt;true&lt;/show-in-menu&gt;
 &lt;group-name/&gt;
 &lt;menu-path&gt;skymenu&amp;gt;end("sky130 PDK").end&lt;/menu-path&gt;
 &lt;interpreter&gt;dsl&lt;/interpreter&gt;
 &lt;dsl-interpreter-name&gt;lvs-dsl-xml&lt;/dsl-interpreter-name&gt;
 &lt;text&gt;
# Copyright 2022 SkyWater PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

'
    str = str + "\n# %include ../lvs/sky130.lvs\n&lt;/text&gt;\n&lt;/klayout-macro&gt;"

    File.open(File.expand_path(File.dirname(__FILE__)) + "/sky130_lvs.lylvs", 'w') { |f| f.write(str) }
    
    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_netgen_lvs.lym", 'w') { |f| 
      text = File.read(f)
      new_contents = text.gsub(/combine.*\n  # End/m, 'combine = ""
  distrib = ""
  no_attr = ""
  purge = ""
  trim_hash = ""
  trim_exclam = ""
  mode = ""
  simpath = "~/.xschem/simulations"
  # End')
      File.open(f, "w") {|file| file.puts new_contents }
    }


    File.open(File.expand_path File.dirname(__FILE__) + "/sky130_magic_pex.lym", 'w') { |f| 
      text = File.read(f)
      new_contents = text.gsub(/combine.*\n  # End/m, 'combine = ""
  distrib = ""
  no_attr = ""
  purge = ""
  trim_hash = ""
  trim_exclam = ""
  mode = ""
  # End')
      File.open(f, "w") {|file| file.puts new_contents }
    }
  end

end


</text>
</klayout-macro>
